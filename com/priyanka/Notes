[12-5-25]

ArrayList
---------------------------------------
Q 1 -> // User function Template for Java
       class Solution {

           public static void add_to_ArrayList(ArrayList<Integer> A, int x) {
               // Your code here
               A.add(x);

               // Just add, don't print anything
           }

           public static void sort_ArrayList_Asc(ArrayList<Integer> A) {


               // Your code here
               Collections.sort(A);
               // Just sort, don't print anything
           }


           public static void reverse_ArrayList(ArrayList<Integer> A) {
               // Your code here
               // Just reverse, don't print anything
               Collections.reverse(A);
           }


           public static int size_Of_ArrayList(ArrayList<Integer> A) {
               // Your code here
               return A.size();
               // Return the size of ArrayList

           }

           public static void sort_ArrayList_Desc(ArrayList<Integer> A) {
               // Your code here

             Collections.sort(A,Collections.reverseOrder());
               // Just sort in desc order, don't print anything
           }

           public static void print_ArrayList(ArrayList<Integer> A) {
               // Your code here
              A.forEach(a->System.out.print(a+" "));
               // Print the elements of A, don't add new line
           }
       }


Java Collections: LinkedList
----------------------------
The LinkedList class in java is a part of the Collection framework and implements the List interface, unlike an
ArrayList, which uses a dynamic array to store the elements, a LinkedList stores its elements as nodes in a doubly
linked list. This provides different performance characteristics and usage scenarios compared to ArrayList.

A LinkedLIst is a linear data structure where each element is a separate object called a node. Each node contains two
parts:-

Data : the value stored in the node
Pointers : two pointers, one pointing to the next node(next) and the other pointing to the previous node(previous)

Performance Consideration : LinkedList has different performance characteristics compared to ArrayList:

->insertion and deletion : LinkedList is better for frequent insertion and deletion in the middle of the
list because it because it does not require shifting of elements, as in ArrayList.
->random access : LinkedList has slower random access(get(int index)) compared to ArrayList because it has to
traverse the list from the beginning t reach the desired index.
->memory overhead : LinkedList requires more memory than ArrayList because each node in a linked list requires
extra memory to store reference to the next and previous nodes.


Vector
---------------------------
A vector in java is a part of the java.util package and is one of thr legacy classes in java that implements the List
interface.
It was introduced in JDK 1.0 before collection framework and is synchronized, making it thread safe. Now it is a part of
collection framework.
However, due to its synchronization overhead, it's generally recommended to use other modern alternatives like ArrayList
in single-threaded scenarios. Despite this, Vector is still useful in certain situations, particularly in multithreaded
environments where thread safety is a concern.

Key features of vector :

->dynamic array : like ArrayList, Vector is a dynamic array that grows automatically when more elements are added than
its current capacity.
->synchronized : All the method in Vector are synchronized, which makes it thread safe. This means multiple threads can
work on a Vector without the risk of corrupting the data. However this can introduced performance overhead in single-threaded environments.
->legacy class : Vector was part of Java's original release and is considered a legacy class. It's generally recommended to use ArrayList in
single-threaded environments due to proper considerations.
->resizing mechanism : when the current capacity of the vector is exceeded, it doubles its size by default(or increases by a specific capacity
increment if provided).
->random access : similar to arrays and ArrayList, Vector allows random access to elements, making it efficient for accessing elements using an
index.

Constructors of Vector :

->Vector() : creates a vector with an initial capacity of 10.
->Vector(int initialCapacity) : creates a vector with a specified initial capacity.
->Vector(int initialCapacity, int capacityIncrement) : creates a vector with an initial capacity and capacity increment
(how much the vector should grow when its capacity is exceeded).
->Vector(Collection<?extends E>c) : creates a vector containing the elements of the specified collection.

Methods in Vector :

-> add(E e) : adds an element at the end.
-> add(int index, E element) : inserts an element at the specified index.
-> get(int index) : retrieves the element at the specified index.
-> set(int index, E element) : replaces the element at the specified element.
-> remove(Object o) : removes the first occurrence of the specified element.
-> remove(int index) : removes the element at the specified index.
-> size() : returns the number of elements in the vector.
-> isEmpty() : checks if the vector i empty.
-> contains(Object o) : checks if the vector contains the specified element.
-> clear() : removes all elements from the vector.

Internal implementation of vector :

Internally, Vector uses an array to store its elements. The size of this array grows as needed when more elements are
added. The default behaviour is to double the size of the array when it runs out of space. This resizing operation is a
costly one, as it requires copying the old elements to the new, larger array.

Synchronization and performance :

Since vector methods are synchronized, it ensures that only one thread can access the vector at a time. This makes it
thread-safe but can introduce performance overhead in single-threaded environments because synchronization adds locking
and unlocking costs.
In modern Java applications, ArrayList is generally preferred over Vector when synchronization isn't required.
For thread-safe collections, the CopyOnWriteArrayList or ConcurrentHashMap from the
java.util.concurrent package is often recommended instead.


Stack
-------------------------------------
Since stack extends vector, it is synchronized, making it thread safe.

LIFO Structure : Stack follows the LIFO principle, where the last element added is the first one to be removed.

Inheritance : Stack is a subclass of Vector, which means it inherits all the features of a dynamic array but is
constrained by stack's LIFO nature.


CopyOnWriteArrayList
-------------------------------------
As we know ArrayList and LinkedList are not thread safe.
Vector and Stack are synchronized.


Map
---------------------------------------

Collection Hierarchy :

                                            Map (Separate Interface)
                                                        |
                      ------------------------------------------------------------------------------
                      |                                 |                                          |
         -------------------------                   SortedMap                              ConcurrentMap
         |                        |                     |                                          |
      HashMap                 HashTable              TreeMap                             ConcurrentHashMap
         |                    (legacy)             NavigableMap                         ConcurrentSkipListMap
     LinkedHashMap
     WeakHashMap
     IdentityHashMap


Map doesn't extend collection interface, it is a separate interface. In java a Map is an object that maps keys to values.
It can not contain duplicate keys, and each key can map to at most one value. Think of it as a dictionary where you look
up a word (key) to find its definition (value).

Key characteristics :

-> key-value pairs : each entry in a Map consists of a key and a value.
-> unique keys : no two entries can have the same key.
-> one value per key : each key maps to single value.
-> order : some implementations maintain insertion order (LinkedHashMap), natural order (TreeMap) or no order (HashMap)

NOTE: koi order nhi hota h HashMap me, ki jis order me ham store ker rahe h zaruri nhi nhi usi order me print ho kisi
      bhi order me ho skta h

Internal Structure of HashMap :

There are 4 basic components -
-> key : identifier used to retrieve the value
-> value : data associated with the key
-> bucket : a place where key-value pairs are stored. Think of buckets as cells in a list (array)
-> Hash function : converts a key into an index (bucket location) for storage

A hash function is an algorithm that takes an input (or "key") and returns a fixed-size string of bytes, typically a
numerical value.
The output is known as a hash code, hash value or simply hash. The primary purpose of a hash function is to map data of
arbitary size to data of fixed size.

Key characteristics :

-> deterministic : the same input will always produce the same output
-> fixed output size : regardless of the input size, the hash code has a consistent size (e.g, 32-bit, 64-bit)
-> efficient computation : the hash function should compute the hash quickly

How data is stored in HashMap :

Step 1 -> Hashing the key : First, the key is passed through a hash function to generate a unique hash code (an integer
          number). This hash code helps determine where the key-value pair will be stored in the array (called a "bucket
          array").

Step 2 -> Calculating the index : The hash code is then used to calculate an index in the array (bucket location) using
          int index = hashCode % arraySize;

         The index decides which bucket will hold this key-value pair.

         E.g., if the array size is 16, the key's hash code will be divided by 16, and the reminder will be the index.

Step 3 -> Storing in the Bucket : The key-value pair is stored in the bucket at hte calculated index. Each bucket can
          hold multiple key-value pairs. (this is called a collision handling mechanism)

          E.g., map.put("apple",50);
          * "apple" is the key
          * 50 is the value
          * hash code of "apple" is calculated
          * index is found using hash code
          * pair ("apple",50) is stored in the corresponding bucket

NOTE : by default array ka size 16 hota h, toh ham us hash code ko divide ker denge 16 se aur jo remainder aayega vo
       index hoga

How HashMap retrieves data :

when we call get(key), the HashMap follows these steps:-
-> Hashing the key : Similar to insertion, the key is hashed using the same hash function to calculate its hash code

-> Finding the index : The hash code is used to find the index of the bucket where the key-value pair is stored

-> Searching in the bucket : once the correct bucket is found, it checks for the key in that bucket, if it finds the key,
it returns the associated value.

Handling Collisions :

Since different keys can generate the same index (called a collision), HashMap uses a technique to handle this situation.
Java's HashMap uses Linked lists (or balanced trees after java 8) for this.

If multiple key-value pairs map to the same bucket, they are stored in a linked list inside the bucket.

when a key-value pair is retrieved, the HashMap traverses the linked list, checking each key it until it finds a match.

Java's HashMap uses Linked list or balanced trees after Java-8. linked list ke case me linear search hoga jisme O(N) T.C
hogi, isliye ham use kerte h balanced binary search tree (Red-Black tree).

Jab ek bucket me entries ek certain threshold (by default 8 hota h) se zayada ho jaati h na toh linked list red-black
tree me convert ho jani chahiye isme O(logN) T.C hoti h. Red-Black tree is self balancing binary search tree.

E.g., -> map.put("apple",50);
         map.put("banana",30);
         map.put("orange",80);

Let's say "apple" ans "orange" end up in the same bucket due to hash collision. They will be stored in a linked list in that bucket:
Bucket 5: ("apple",50) -> ("orange",80)
When we do map.get("orange"), HashMap will go to Bucket 5 and then traverse the linked list to find the entry with the key "orange".

HashMap Resizing (Rehashing) :

HashMap has an internal array size, which by default is 16, when the number of elements (key-value pairs) grows and exceeds a certain
load factor (default is 0.75), HashMap automatically resizes the array to hold more data, this process is called rehashing.

The default size of the array is 16, so when more than 12 elements (16*0.75) are inserted, the HashMap will resize.

During rehashing the size is doubled.
1. All existing entries are rehashed (i.e., their positions are recalculated) and placed into the new array.
2. This ensures the HashMap continues to perform efficiently even as more data is added.

Time Complexity :

HashMap provides constant time O(1) performance for basic operations like put() and get() (assuming no collisions). However, if there
are many collisions and many entries are stored in the same bucket, the performance can degradde to O(N), where N is the number of elements
in that bucket.
But after Java 8 if there are too many elements in a bucket, HashMap switches to a balanced tree instead of a linked list to ensure better
performance O(logN).

NOTE : Object class ke pass 2 methods hote h
       -> hash code : iska hash code memory address se generate hota h, mtlb ham jitne bhi instance banayege class ke utne hi hash code
                      generate honge
       -> equals : ye reference dekhega, ye bhi check karega ki address same h ya different.

TABLE for Time Complexity :

Operation                  Average-Case T.C              Worst-Case T.C                                       Explanation
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
put(key,value)                    O(1)                      O(log n)                    Inserts a key-value pair, average: constant time due to direct bucket access.
                                                                                        Worst-case: O(log n) when bucket converts to a red-black tree after exceeding
                                                                                        collision threshold.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
get(key)                          O(1)                      O(log n)                    Retrieves the value associated with a key. Average: constant time via direct
                                                                                        bucket access. Worst-case: O(log n) when searching within treeified bucket.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
remove(key)                       O(1)                      O(log n)                    Removes the key-value pair associated with a key. Average-case: constant time
                                                                                        with direct access. Worst-case: O(log n) when removing from a treeified bucket.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
contains(key)                     O(1)                      O(log n)                    checks if a key exists in the map. average: constant time via direct bucket access.
                                                                                        worst-case: O(log n) when searching within a treeified bucket.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
containsValue(value)              O(n)                        O(n)                      Checks if a value exists in a map. both average and worst-case are linear time
                                                                                        since it may need to traverse all entries.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
size()                            O(1)                        O(1)                      returns the number of key-value pairs. both average and worst-case are constant
                                                                                        time as the size is maintained as a separate field.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


LinkedHashMap :
---------------------------------------

Isme order maintain hota h but HashMap me nhi hota. LinkedHashMap me ek double L.L hoti h jo same order me values ko rkhti
h jese hamne insert kare hote h.

Note :
In Java, the LinkedHashMap class can be used to implement a Least Recently Used (LRU) Cache by overriding its
removeEldestEntry method. This method allows you to specify a condition to remove the eldest entry when a new entry is added.

Explanation:
Constructor Parameters:

capacity: Maximum number of entries the cache can hold.
0.75f: Load factor (default value).
true: Enables access-order mode, meaning the order of entries is based on access (most recently accessed entries are moved to the end).
Eviction Policy:

The removeEldestEntry method is overridden to remove the eldest entry when the size exceeds the specified capacity.
Access Order:

When an entry is accessed using get or updated using put, it is moved to the end of the map.

Ye bhi thread safe nhi h


WeakHashMap
------------------------------------------

Garbage Collection

